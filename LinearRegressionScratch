import numpy as np
import pandas as pd

class LinearRegressionScratch:
    def __init__(self, learning_rate=0.01, n_iterations=1000):
        self.lr = learning_rate
        self.n_iter = n_iterations
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        # Gradient Descent
        for _ in range(self.n_iter):
            y_pred = np.dot(X, self.weights) + self.bias
            dw = (1 / n_samples) * np.dot(X.T, (y_pred - y))
            db = (1 / n_samples) * np.sum(y_pred - y)
            self.weights -= self.lr * dw
            self.bias -= self.lr * db

    def predict(self, X):
        return np.dot(X, self.weights) + self.bias

# Create a sample dataset
data = {
    'feature1': [1, 2, 3, 4, 5],
    'feature2': [2, 4, 6, 8, 10],
    'target': [3, 6, 9, 12, 15]
}
df = pd.DataFrame(data)

# Extract features and target
X = df[['feature1', 'feature2']].values
y = df['target'].values

# Initialize and train the model
model = LinearRegressionScratch(learning_rate=0.01, n_iterations=1000)
model.fit(X, y)

# Predict
predictions = model.predict(X)
print("Predictions:", predictions)
